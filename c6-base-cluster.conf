include file("your-aws-info.conf")

## Instance Configurations
INSTANCE_TYPE_CM:        t2.xlarge    #vCPU 4, RAM 16G
INSTANCE_TYPE_MASTER:    t2.large     #vCPU 2, RAM 8G
INSTANCE_TYPE_WORKER:    t2.large     #vCPU 2, RAM 8G
INSTANCE_TYPE_KAFKA:     t2.large     #vCPU 2, RAM 8G

WORKER_NODE_NUM:         3            #Number of Worker Nodes
##

name: c6-base-cluster

provider {
    type: aws
    accessKeyId: ${?AWS_ACCESS_KEY_ID}
    secretAccessKey: ${?AWS_SECRET_ACCESS_KEY}
    region: ${?AWS_REGION}
    subnetId: ${?AWS_SUBNET_ID}
    securityGroupsIds: ${?AWS_SECURITY_GROUP}
}
ssh {
    username: ${?OS_USERNAME}
    privateKey: ${?KEY_PAIR}
}
common-instance-properties {
    image: ${?AWS_AMI}
    tags {
        owner: ${?INSTANCE_OWNER_TAG}
    }
}

cloudera-manager {
    instance: ${common-instance-properties} {
        type: ${INSTANCE_TYPE_CM}
        instanceNamePrefix: ${?INSTANCE_NAME_PREFIX}"-cm"
        tags {
            application: "Cloudera Manager 6"
        }
        bootstrapScriptsPaths: [
            "scripts/common/bootstrap-common.sh",
            "scripts/common/c6/bootstrap-common.sh"
            "scripts/base-cluster/bootstrap-cm-init.sh"
        ]
    }
    enableEnterpriseTrial: true

    javaInstallationStrategy: NONE

    repository: "https://archive.cloudera.com/cm6/6.0.0/redhat7/yum/"
    repositoryKeyUrl: "https://archive.cloudera.com/cm6/6.0.0/redhat7/yum/RPM-GPG-KEY-cloudera"

    # Optional custom service descriptors for external parcels
    csds: []

    configs {
        CLOUDERA_MANAGER {
            custom_banner_html: "Demo cluster managed by Cloudera Director"
        }
        NAVIGATORMETASERVER {
            # for Navigator Demo
            navigator_safety_valve: "nav.extractor.poll_period=10"
        }
    }
    postCreateScriptsPaths: []
}

cluster {
    products {
        CDH: 6
    }

    parcelRepositories: [
        "https://archive.cloudera.com/cdh6/6.0.0/parcels/"
    ]
    
    services: [
        ZOOKEEPER,
        HDFS,
        YARN,
        SPARK_ON_YARN,
        HBASE,
        HIVE,
        IMPALA,
        OOZIE,
        HUE,
        SOLR,
        KUDU,
        FLUME,
        KAFKA
    ]

    configs {
        KAFKA {
          "num.partitions": 1
        }
    }

    master {
        count: 1

        instance: ${common-instance-properties} {
            type: ${INSTANCE_TYPE_MASTER}
            instanceNamePrefix: ${?INSTANCE_NAME_PREFIX}"-master"
            tags {
                group: master
            }
            bootstrapScriptsPaths: [
                "scripts/common/bootstrap-common.sh",
                "scripts/common/c6/bootstrap-common.sh"
                "scripts/base-cluster/bootstrap-master-init.sh"
            ]
        }

        roles {
            ZOOKEEPER: [SERVER]
            HDFS: [NAMENODE,SECONDARYNAMENODE]
            YARN: [RESOURCEMANAGER,JOBHISTORY]
            SPARK_ON_YARN: [SPARK_YARN_HISTORY_SERVER]
            HBASE: [MASTER]
            HIVE: [HIVEMETASTORE,HIVESERVER2]
            IMPALA: [STATESTORE,CATALOGSERVER]
            OOZIE: [OOZIE_SERVER]
            HUE: [HUE_SERVER]
            SOLR: [SOLR_SERVER]
            KUDU: [KUDU_MASTER]
        }
        configs {
            HDFS {
                NAMENODE {
                    dfs_name_dir_list: "/data0/nn"
                }
                SECONDARYNAMENODE {
                    fs_checkpoint_dir_list: "/data0/snn"
                }
            }
            YARN {
                RESOURCEMANAGER {
                    yarn_scheduler_maximum_allocation_mb: 8192
                    yarn_scheduler_maximum_allocation_vcores: 4
                }
            }
            KUDU {
	            KUDU_MASTER {
	                fs_wal_dir: "/data0/kudu/masterwal"
	                fs_data_dirs: "/data0/kudu/master"
	            }
            }
        }
    }

    worker {
        count: ${?WORKER_NODE_NUM}
        minCount: ${?WORKER_NODE_NUM}
        instance: ${common-instance-properties} {
            type: ${INSTANCE_TYPE_WORKER}
            instanceNamePrefix: ${?INSTANCE_NAME_PREFIX}"-worker"
            tags {
                group: worker
            }
            
            # Disks are automatically mounted by Cloudera Director
            # /data0, /data1, /data2 ...
            ebsVolumeCount : 4
	        ebsVolumeType: gp2
	        ebsVolumeSizeGiB: 50

            bootstrapScriptsPaths: [
                "scripts/common/bootstrap-common.sh",
                "scripts/common/c6/bootstrap-common.sh"
                "scripts/base-cluster/bootstrap-worker-init.sh"
            ]
        }
        roles {
            HDFS: [DATANODE]
            YARN: [NODEMANAGER]
            HBASE: [REGIONSERVER]
            IMPALA: [IMPALAD]
            KUDU: [KUDU_TSERVER]
            FLUME: [AGENT]
        }
        configs {
            HDFS {
                DATANODE {
                    fs_data_dirs: "/data1/kudu/tablet, /data2/kudu/tablet, /data3/kudu/tablet"
                }
            }
            YARN {
                NODEMANAGER {
                    yarn_nodemanager_resource_memory_mb: 4096
                    yarn_nodemanager_resource_cpu_vcores: 2
                }
            }
            KUDU {
                KUDU_TSERVER {
                    fs_wal_dir: "/data0/kudu/tabletwal"
                    fs_data_dirs: "/data1/kudu/tablet, /data2/kudu/tablet, /data3/kudu/tablet"
                    #memory_limit_hard_bytes: 17179869184 #16GiB
                    #block_cache_capacity_mb: 2048 #2GiB
                }
            }
            IMPALA {
                IMPALAD {
                    #impalad_memory_limit: 17179869184 #16GiB
                }
            }
        }
    }

    kafka {
        count: 1
        instance: ${common-instance-properties} {
            type: ${INSTANCE_TYPE_KAFKA}
            instanceNamePrefix: ${?INSTANCE_NAME_PREFIX}"-kafka"
            tags {
                group: kafka
            }
            bootstrapScriptsPaths: [
                "scripts/common/bootstrap-common.sh",
                "scripts/common/c6/bootstrap-common.sh",
                "scripts/base-cluster/bootstrap-kafka-init.sh"
            ]
        }
        roles {
            KAFKA: [KAFKA_BROKER]
            HDFS: [GATEWAY]
            HBASE: [GATEWAY]
            HIVE: [GATEWAY]
            SPARK_ON_YARN: [GATEWAY]
            SOLR: [GATEWAY]
        }
        configs {
            KAFKA {
               KAFKA_BROKER {
                 broker_max_heap_size: 512
                 "log.dirs": /data0/kafka/data
              }
            }
        }
    }

    instancePostCreateScriptsPaths: [
        "scripts/base-cluster/postcreate-common-addusers.sh"
    ]
    postCreateScriptsPaths: []
    preTerminateScriptsPaths: []
}
