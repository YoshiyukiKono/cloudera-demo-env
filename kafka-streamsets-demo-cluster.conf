include file("your-aws-info.conf")

## Instance Configurations
INSTANCE_TYPE_CM:        m4.xlarge
INSTANCE_TYPE_MASTER:    m4.xlarge
INSTANCE_TYPE_WORKER:    r4.4xlarge
INSTANCE_TYPE_KAFKA:     t2.large

WORKER_NODE_NUM:         5            #Number of Worker Nodes
##

name: kafka-demo-cluster

provider {
    type: aws
    accessKeyId: ${?AWS_ACCESS_KEY_ID}
    secretAccessKey: ${?AWS_SECRET_ACCESS_KEY}
    region: ${?AWS_REGION}
    subnetId: ${?AWS_SUBNET_ID}
    securityGroupsIds: ${?AWS_SECURITY_GROUP}
}
ssh {
    username: ${?OS_USERNAME}
    privateKey: ${?KEY_PAIR}
}
common-instance-properties {
    image: ${?AWS_AMI}
    tags {
        owner: ${?INSTANCE_OWNER_TAG}
    }
}

cloudera-manager {
    instance: ${common-instance-properties} {
        type: ${INSTANCE_TYPE_CM}
        instanceNamePrefix: ${?INSTANCE_NAME_PREFIX}"-cm"
        tags {
            application: "Cloudera Manager 5"
        }
        bootstrapScriptsPaths: [
            "scripts/common/bootstrap-common.sh"
        ]
    }
    enableEnterpriseTrial: true

    javaInstallationStrategy: NONE

    repository: "https://archive.cloudera.com/cm5/redhat/7/x86_64/cm/5.14.1/"
    repositoryKeyUrl: "https://archive.cloudera.com/cm5/redhat/7/x86_64/cm/RPM-GPG-KEY-cloudera"

    # Optional custom service descriptors for external parcels
    csds: [
        "https://archives.streamsets.com/datacollector/3.2.0.0/csd/STREAMSETS-3.2.0.0.jar",
        "https://archive.cloudera.com/spark2/csd/SPARK2_ON_YARN-2.3.0.cloudera2.jar"
    ]

    configs {
        CLOUDERA_MANAGER {
            custom_banner_html: "Demo cluster managed by Cloudera Director"
        }
        NAVIGATORMETASERVER {
            # for Navigator Demo
            navigator_safety_valve: "nav.extractor.poll_period=10"
        }
    }
}

cluster {
    products {
        CDH: 5
        KAFKA: 3
        SPARK2: 2
        STREAMSETS_DATACOLLECTOR: 3
    }

    parcelRepositories: [
        "https://archive.cloudera.com/cdh5/parcels/5.14.2/",
        "https://archive.cloudera.com/kafka/parcels/3.0.0/",
        "https://archive.cloudera.com/spark2/parcels/2.3.0.cloudera2/",
        "https://archives.streamsets.com/datacollector/3.2.0.0/parcel/"
    ]
    services: [
        ZOOKEEPER,
        HDFS,
        YARN,
        SPARK_ON_YARN,
        SPARK2_ON_YARN,
        HIVE,
        IMPALA,
        OOZIE,
        HUE,
        KUDU,
        KAFKA,
        STREAMSETS
    ]

    configs {
        KAFKA {
          "num.partitions": 1
        }
    }

    master {
        count: 1

        instance: ${common-instance-properties} {
            type: ${INSTANCE_TYPE_MASTER}
            instanceNamePrefix: ${?INSTANCE_NAME_PREFIX}"-master"
            tags {
                group: master
            }
            bootstrapScriptsPaths: [
                "scripts/common/bootstrap-common.sh"
            ]
        }

        roles {
            ZOOKEEPER: [SERVER]
            HDFS: [NAMENODE,SECONDARYNAMENODE]
            YARN: [RESOURCEMANAGER,JOBHISTORY]
            SPARK_ON_YARN: [SPARK_YARN_HISTORY_SERVER]
            SPARK2_ON_YARN: [SPARK2_YARN_HISTORY_SERVER]
            HIVE: [HIVEMETASTORE,HIVESERVER2]
            IMPALA: [STATESTORE,CATALOGSERVER]
            OOZIE: [OOZIE_SERVER]
            HUE: [HUE_SERVER]
            KUDU: [KUDU_MASTER]
        }
        configs {
            HDFS {
                NAMENODE {
                    dfs_name_dir_list: "/data0/nn"
                }
                SECONDARYNAMENODE {
                    fs_checkpoint_dir_list: "/data0/snn"
                }
            }
            YARN {
                RESOURCEMANAGER {
                    yarn_scheduler_maximum_allocation_mb: 32768
                    yarn_scheduler_maximum_allocation_vcores: 16
                }
            }
            KUDU {
	            KUDU_MASTER {
	                fs_wal_dir: "/data0/kudu/masterwal"
	                fs_data_dirs: "/data0/kudu/master"
	            }
            }
        }
    }

    worker {
        count: ${?WORKER_NODE_NUM}
        minCount: ${?WORKER_NODE_NUM}
        instance: ${common-instance-properties} {
            type: ${INSTANCE_TYPE_WORKER}
            instanceNamePrefix: ${?INSTANCE_NAME_PREFIX}"-worker"
            tags {
                group: worker
            }
            bootstrapScriptsPaths: [
                "scripts/common/bootstrap-common.sh"
            ]
            ebsVolumeCount : 5
	          ebsVolumeType: gp2
	          ebsVolumeSizeGiB: 100
        }
        roles {
            HDFS: [DATANODE]
            YARN: [NODEMANAGER]
            IMPALA: [IMPALAD]
            KUDU: [KUDU_TSERVER]
            HIVE: [GATEWAY]
        }
        configs {
            HDFS {
                DATANODE {
                    dfs_data_dir_list: "/data0/dn,/data1/dn,/data2/dn,/data3/dn,/data4/dn"
                }
            }
            YARN {
                NODEMANAGER {
                    yarn_nodemanager_resource_memory_mb: 8192
                    yarn_nodemanager_resource_cpu_vcores: 4
                    yarn_nodemanager_local_dirs: "/data0/yarn/nm,/data1/yarn/nm,/data2/yarn/nm,/data3/yarn/nm,/data4/yarn/nm"
                }
            }
            KUDU {
                KUDU_TSERVER {
                    fs_wal_dir: "/data0/kudu/tabletwal"
                    fs_data_dirs: "/data1/kudu/tablet,/data2/kudu/tablet,/data3/kudu/tablet,/data4/kudu/tablet"
                    memory_limit_hard_bytes: 6442450944
                    #block_cache_capacity_mb: 2048
                }
            }
            IMPALA {
                IMPALAD {
                    scratch_dirs: "/data0/impala/impalad,/data1/impala/impalad,/data2/impala/impalad,/data3/impala/impalad,/data4/impala/impalad"
                    impalad_memory_limit: 25769803776
                }
            }
        }
    }

    kafka {
        count: 1
        instance: ${common-instance-properties} {
            type: ${INSTANCE_TYPE_KAFKA}
            instanceNamePrefix: ${?INSTANCE_NAME_PREFIX}"-kafka"
            tags {
                group: worker
            }
            bootstrapScriptsPaths: [
                "scripts/common/bootstrap-common.sh"
            ]
        }
        roles {
            KAFKA: [KAFKA_BROKER]
            STREAMSETS: [DATACOLLECTOR]
            HDFS: [GATEWAY]
            YARN: [GATEWAY]
            HIVE: [GATEWAY]
            SPARK_ON_YARN: [GATEWAY]
            SPARK2_ON_YARN: [GATEWAY]
        }
        configs {
            KAFKA {
               KAFKA_BROKER {
                 broker_max_heap_size: 512
                 "log.dirs": /data0/kafka/data
              }
            }
        }
    }

}
