include file("your-aws-info.conf")

## Instance Configurations
INSTANCE_TYPE_CM:        t2.xlarge    #vCPU 4, RAM 16G
INSTANCE_TYPE_MASTER:    t2.large     #vCPU 2, RAM 8G
INSTANCE_TYPE_WORKER:    t2.large     #vCPU 2, RAM 8G
INSTANCE_TYPE_CDSW:      t2.2xlarge   #vCPU 8, RAM 32G          

WORKER_NODE_NUM:         3            #Number of Worker Nodes

CDSW_DOCKER_VOLUME_NUM:  3    
CDSW_DOCKER_VOLUME_GB:   200
##

name: cdsw-secure-cluster

provider {
    type: aws
    accessKeyId: ${?AWS_ACCESS_KEY_ID}
    secretAccessKey: ${?AWS_SECRET_ACCESS_KEY}
    region: ${?AWS_REGION}
    subnetId: ${?AWS_SUBNET_ID}
    securityGroupsIds: ${?AWS_SECURITY_GROUP}
}
ssh {
    username: ${?OS_USERNAME}
    privateKey: ${?KEY_PAIR}
}
common-instance-properties {
    image: ${?AWS_AMI}
    tags {
        owner: ${?INSTANCE_OWNER_TAG}
    }
}

cloudera-manager {
    instance: ${common-instance-properties} {
        type: ${INSTANCE_TYPE_CM}
        instanceNamePrefix: ${?INSTANCE_NAME_PREFIX}"-cm"
        tags {
            application: "Cloudera Manager 5"
        }
        bootstrapScriptsPaths: [
            "common/bootstrap-common.sh",
            "cluster-cdsw-secure/bootstrap-cm-init.sh",
            "cluster-cdsw-secure/bootstrap-common-configure-network.sh",
            "cluster-cdsw-secure/bootstrap-cm-configure_krb5.sh"
        ]
    }
    enableEnterpriseTrial: true

    javaInstallationStrategy: NONE

    repository: "http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/5.12/"
    repositoryKeyUrl: "http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/RPM-GPG-KEY-cloudera"
    
    # Optional custom service descriptors for external parcels
    csds: [
      "http://archive.cloudera.com/spark2/csd/SPARK2_ON_YARN-2.2.0.cloudera1.jar"
    ]

    # Secure Cluster
    # Autoconfiguration by bootstrap-cm-configure_krb5.sh
    krbAdminUsername: "cloudera-scm/admin@HADOOP"
    krbAdminPassword: "cloudera"
    unlimitedJce: true

    configs {
        CLOUDERA_MANAGER {
            custom_banner_html: "Demo cluster managed by Cloudera Director"

            # Secure Cluster
            # Autoconfiguration by bootstrap-cm-configure_krb5.sh
            KDC_TYPE: "MIT KDC"
            KDC_HOST: "kerberos" # see also bootstrap-configure-network.sh
            SECURITY_REALM: "HADOOP"
            KRB_MANAGE_KRB5_CONF: true
            #KRB_ENC_TYPES: "aes256-cts aes128-cts des3-hmac-sha1 arcfour-hmac des-hmac-sha1 des-cbc-md5 des-cbc-crc"
            KRB_ENC_TYPES: "arcfour-hmac"
        }
        NAVIGATORMETASERVER { 
            # for Navigator Demo
            navigator_safety_valve: "nav.extractor.poll_period=10"
        }
    }
    postCreateScriptsPaths: [
        "cluster-cdsw-secure/postcreate-cm.sh",
        "cluster-cdsw-secure/postcreate-common-addusers-and-principals.sh"
    ]
}

cluster {
    products {
        CDH: 5
        KUDU: 1.4.0
        KAFKA: 2
        SPARK2: 2
        Anaconda: 4.2.0
    }
    
    parcelRepositories: [
        "http://archive.cloudera.com/cdh5/parcels/5.12/",
        "http://archive.cloudera.com/spark2/parcels/2.2/",
        "http://archive.cloudera.com/kafka/parcels/2.2/",
        "http://archive.cloudera.com/kudu/parcels/5.12/",
        "https://repo.continuum.io/pkgs/misc/parcels/"
    ]
    services: [
        ZOOKEEPER,
        HDFS,
        YARN,
        SPARK2_ON_YARN,
        HBASE,
        HIVE,
        IMPALA,
        OOZIE,
        HUE,
        SOLR,
        SENTRY,    # Sentry requires Kerberos to be enabled
        KUDU,
        FLUME,
        KAFKA
    ]

    master {
        count: 1

        instance: ${common-instance-properties} {
            type: ${INSTANCE_TYPE_MASTER}
            instanceNamePrefix: ${?INSTANCE_NAME_PREFIX}"-master"
            tags {
                group: master
            }
            bootstrapScriptsPaths: [
                "common/bootstrap-common.sh",
                "cluster-cdsw-secure/bootstrap-master-init.sh", 
                "cluster-cdsw-secure/bootstrap-common-configure-network.sh"
            ]
        }

        roles {
            ZOOKEEPER: [SERVER]
            HDFS: [NAMENODE,SECONDARYNAMENODE]
            YARN: [RESOURCEMANAGER,JOBHISTORY]
            SPARK2_ON_YARN: [SPARK2_YARN_HISTORY_SERVER]
            HBASE: [MASTER]
            HIVE: [HIVEMETASTORE,HIVESERVER2]
            IMPALA: [STATESTORE,CATALOGSERVER]
            OOZIE: [OOZIE_SERVER]
            HUE: [HUE_SERVER]
            SOLR: [SOLR_SERVER]
            KUDU: [KUDU_MASTER]
            KAFKA: [KAFKA_BROKER]
            SENTRY: [SENTRY_SERVER] # Sentry requires Kerberos
        }
        configs {
            HDFS {
                NAMENODE {
                    dfs_name_dir_list: "/data0/nn"
                }
                SECONDARYNAMENODE {
                    fs_checkpoint_dir_list: "/data0/snn"
                }
            }
            KUDU {
	            KUDU_MASTER {
	                fs_wal_dir: "/data0/kudu/masterwal"
	                fs_data_dirs: "/data0/kudu/master"
	            }
            }
        }
    }

    worker {
        count: ${?WORKER_NODE_NUM}
        minCount: ${?WORKER_NODE_NUM}
        instance: ${common-instance-properties} {
            type: ${INSTANCE_TYPE_WORKER}
            instanceNamePrefix: ${?INSTANCE_NAME_PREFIX}"-worker"
            tags {
                group: worker
            }
            bootstrapScriptsPaths: [
                "common/bootstrap-common.sh",
                "cluster-cdsw-secure/bootstrap-worker-init.sh", 
                "cluster-cdsw-secure/bootstrap-common-configure-network.sh"
            ]
        }
        roles {
            HDFS: [DATANODE]
            YARN: [NODEMANAGER]
            HBASE: [REGIONSERVER]
            IMPALA: [IMPALAD]
            KUDU: [KUDU_TSERVER]
            FLUME: [AGENT]
        }
        configs {
            HDFS {
                DATANODE {
                    dfs_data_dir_list: "/data0/dn"
                }
            }
            KUDU {
                KUDU_TSERVER {
                    fs_wal_dir: "/data0/kudu/tabletwal"
                    fs_data_dirs: "/data0/kudu/tablet"
                    #memory_limit_hard_bytes: 17179869184 #16GiB
                    #block_cache_capacity_mb: 2048 #2GiB
                }
            }
            IMPALA {
                IMPALAD {
                    #impalad_memory_limit: 17179869184 #16GiB
                }
            }
        }
    }

    cdsw {
        count: 1
        instance: ${common-instance-properties} {
            type: ${INSTANCE_TYPE_CDSW}
            instanceNamePrefix: ${?INSTANCE_NAME_PREFIX}"-cdsw"
            tags {
                group: cdsw
            }

            rootVolumeSizeGB: 100
	        rootVolumeType: gp2
	        ebsVolumeCount : ${CDSW_DOCKER_VOLUME_NUM}
	        ebsVolumeType: gp2
	        ebsVolumeSizeGiB: ${CDSW_DOCKER_VOLUME_GB}

            bootstrapScriptsPaths: [
                "common/bootstrap-common.sh",
                "cluster-cdsw-secure/bootstrap-cdsw-init.sh",
                "cluster-cdsw-secure/bootstrap-common-configure-network.sh"
            ]
        }
        roles {
            HDFS: [GATEWAY]
            HBASE: [GATEWAY]
            HIVE: [GATEWAY]
            SPARK2_ON_YARN: [GATEWAY]
            SOLR: [GATEWAY]
        }
    }
    
    instancePostCreateScriptsPaths: [
        "cluster-cdsw-secure/postcreate-common-addusers-and-principals.sh",
        "cluster-cdsw-secure/instance-postcreate-cdsw.sh"
    ]
    #postCreateScriptsPaths: []
}
